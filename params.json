{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Interface Style Guide for Ruby Projects","google":"UA-36501636-1","tagline":"An Interface style guide for Ruby projects.","body":"# Interface Style Guide\r\n\r\n\r\n## Table of Contents\r\n\r\n* [CSS Code Style](#css-code-style)\r\n* [CSS File Organization](#css-file-organization)\r\n* [HTML5 Code Style](#html5-code-style)\r\n* [Cross-browser Compatibility](#cross-browser-compatibility)\r\n\r\n\r\n## CSS Code Style\r\n\r\n* Use soft-tabs with a two space indent.\r\n* Put spaces after : in property declarations.\r\n* Put spaces before { in rule declarations.\r\n* Use hex color codes #000 unless using rgba.\r\n* Use // for comment blocks (instead of /\\* */)\r\n* Use hyphen for naming classes.\r\n\r\n  ```css\r\n    // Bad\r\n    .s_header\r\n\r\n    // Good\r\n    .s-header\r\n  ```\r\n\r\n* Use hyphen or underscore for naming css files. Do not use CamelCase.\r\n\r\n  ```\r\n    // Bad\r\n    SectionName.scss.erb\r\n\r\n    // Good\r\n    section-name.scss.erb\r\n  ```\r\n* Use ERB extension when naming css file if SCSS preprocessor is used for a Ruby project. This is often needed if you want to use the asset_path for your images.\r\n\r\n  ```\r\n    // Bad\r\n    application.scss\r\n\r\n    // Good\r\n    application.scss.erb\r\n  ```\r\n* Recommended: use the asset_path helper for images.\r\n\r\n  ```css\r\n    // Bad\r\n    background: url('/assets/images/test.png');\r\n\r\n    // Good\r\n    background: url('<%= asset_path('test.png') %>');\r\n  ```\r\n\r\n* Use !important rule when necessary. Sometimes it is not necessary when your style definitions are ordered properly.\r\n* Limit **depth of applicability** by using fewer selectors, avoiding ID selectors and relying less on html structure.\r\n\r\n  ```css\r\n    // Bad\r\n    #main #sidebar p img {\r\n      background: #FFF;\r\n      border: 1px solid #DDD;\r\n      padding: 5px;\r\n    }\r\n\r\n    // Good\r\n\r\n    #sidebar img {\r\n      background: #FFF;\r\n      border: 1px solid #DDD;\r\n      padding: 5px;\r\n    }\r\n\r\n    // Good\r\n\r\n    Add a new class for image frame which can be applied to other images that are not within the sidebar\r\n\r\n    .image-frame {\r\n      background: #FFF;\r\n      border: 1px solid #DDD;\r\n      padding: 5px;\r\n    }\r\n  ```\r\n\r\n## CSS File Organization\r\n\r\n  ```\r\n    app/assets/stylesheets\r\n    ├── components\r\n    │   ├── buttons.scss.erb\r\n    |   ├── forms.scss.erb\r\n    │   ├── boxes.scss.erb\r\n    │   └── lists.scss.erb\r\n    ├── base\r\n    │   └── normalize.scss.erb\r\n    ├── ie\r\n    │   ├── ie8.scss.erb\r\n    │   └── ie9.scss.erb\r\n    ├── mobile\r\n    │   └── layout.scss.erb\r\n    ├── layouts\r\n    │   ├── grid.scss.erb\r\n    │   └── structure.scss.erb\r\n    ├── themes\r\n    │   ├── blue.scss.erb\r\n    │   └── black.scss.erb\r\n    ├── mixins\r\n    │   ├── _corners.scss\r\n    │   └── _linear-gradients.scss\r\n    │   └── _animation.scss\r\n    ├── sections\r\n    │   ├── blog.scss.erb\r\n    │   └── lists.scss.erb\r\n    └── globals\r\n        ├── colors.scss\r\n        └── typography.scss\r\n  ```\r\n\r\n## HTML5 Code Style\r\n\r\n* Use soft-tabs with a two space indent.\r\n\r\n* Defining the doctype\r\n\r\n  In ERB (Ruby) or HTML:\r\n\r\n  ```html\r\n    <!DOCTYPE html>\r\n  ```\r\n\r\n  In HAML (Ruby):\r\n\r\n  ```ruby\r\n    !!! 5\r\n  ```\r\n\r\n* Semantics\r\n\r\n  There are a lot of well-written guides on semantics:\r\n\r\n  * <a href=\"http://www.html5rocks.com/en/features/semantics\" title=\"HTML5 Rocks\" target=\"_blank\">HTML5 Rocks </a>\r\n  * <a href=\"http://diveintohtml5.info/\" title=\"Dive into HTML5\"  target=\"_blank\">Dive into HTML5</a>\r\n  * <a href=\"http://learn.shayhowe.com/html-css/elements-semantics\" title=\"Elements and Semantics\" target=\"_blank\">Shay Howe on Elements and Semantics</a>\r\n\r\n* Stop using and remove any of these obsolete and deprecated elements:\r\n\r\n  **Obsolete Elements**\r\n  * frameset\r\n  * frame\r\n  * noframe\r\n  * acronym (replaced by abbr)\r\n  * applet (replaced by object)\r\n  * dir (replaced by ul)\r\n\r\n  **Deprecated Elements**\r\n  * basefont\r\n  * big\r\n  * center\r\n  * font\r\n  * s\r\n  * strike\r\n  * tt\r\n  * u\r\n\r\n* These attributes are no longer valid:\r\n  * align\r\n  * link, vlink, alink, and text attributes on the body tag\r\n  * bgcolor\r\n  * height and width\r\n  * scrolling on the iframe element\r\n  * valign\r\n  * hspace and vspace\r\n  * cellpadding, cellspacing, and border on table\r\n\r\n* Omitting file type and media type is valid for the link tag.\r\n\r\n  ```html\r\n    <link href='/assets/style.css' rel='stylesheet'/>\r\n  ```\r\n\r\n* Omitting file type is valid for the javascript link tag.\r\n\r\n  ```html\r\n    <script src='/assets/application.js' />\r\n  ```\r\n\r\n* The header tag, footer and other new tags can be used within a section.\r\n\r\n  ```html\r\n    <section>\r\n      <header>\r\n        <h1>Change Quotation</h1>\r\n      </header>\r\n    <blockquote>\r\n      To improve is to change; to be perfect is to change often.\r\n        - Winston Churchill\r\n    </blockquote>\r\n    </section>\r\n  ```\r\n\r\n* The article tag is ideal for actual content. A section can have many articles and articles can have many sections.\r\n  ```\r\n    <article>\r\n      <header>\r\n        <h1>Redemption Song</h1>\r\n      </header>\r\n        <p>None but ourselves can free our minds.</p>\r\n      <footer>\r\n        <p>\r\n          Song by Bob Marley.\r\n          Released: October 1980\r\n        </p>\r\n      </footer>\r\n    </article>\r\n  ```\r\n\r\n* Use **placeholder** attribute for providing hints and use <a href=\"https://github.com/mathiasbynens/jquery-placeholder\" title=\"jQuery Placeholder\">jQuery Placeholder</a> for browsers that do not support it.\r\n\r\n   ```\r\n    // bad\r\n    <input id=\"email\" type=\"email\" name=\"email\" data-hint=\"user@example.com\">\r\n\r\n    // good\r\n    <input id=\"email\" type=\"email\" name=\"email\" placeholder=\"user@example.com\">\r\n  ```\r\n\r\n## Cross-browser Compatibility\r\n\r\n* Use conditional comments sensibly. Indicate the version of the browser by naming the file accordingly.\r\n\r\n   ```\r\n      // for IE 8 browsers only\r\n      <!--[if IE 8]>\r\n        <link href='/assets/ie8.css' media='screen' rel='stylesheet' />\r\n      ![endif]-->\r\n\r\n      // for IE 9 browsers and below.\r\n      <!--[if lt IE 9]>\r\n        <link href='/assets/lt-ie9.css' media='screen' rel='stylesheet' />\r\n      ![endif]-->\r\n\r\n      // for IE 9 browsers only\r\n      <!--[if IE 9]>\r\n        <link href='/assets/ie9.css' media='screen' rel='stylesheet' />\r\n      ![endif]-->\r\n   ```\r\n\r\n* **Conditional Comments Syntax Table**\r\n\r\n  <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"poll-results\">\r\n    <tbody>\r\n      <tr>\r\n        <th>Item</th>\r\n        <th>Example</th>\r\n        <th>Comment</th>\r\n      </tr>\r\n      <tr>\r\n        <td>!</td>\r\n        <td>[if !IE]</td>\r\n        <td>The NOT operator. This is placed immediately in front of the <em>feature</em>, <em>operator</em>, or <em>subexpression</em> to reverse the Boolean meaning of the expression.</td>\r\n      </tr>\r\n      <tr>\r\n        <td>lt</td>\r\n        <td>[if lt IE 5.5]</td>\r\n        <td>The less-than operator. Returns true if the first argument is less than the second argument.</td>\r\n      </tr>\r\n      <tr>\r\n        <td>lte</td>\r\n        <td>[if lte IE 6]</td>\r\n        <td>The less-than or equal operator. Returns true if the first argument is less than or equal to the second argument.</td>\r\n      </tr>\r\n      <tr>\r\n        <td>gt</td>\r\n        <td>[if gt IE 5]</td>\r\n        <td>The greater-than operator. Returns true if the first argument is greater than the second argument.</td>\r\n      </tr>\r\n      <tr>\r\n        <td>gte</td>\r\n        <td>[if gte IE 7]</td>\r\n        <td>The greater-than or equal operator. Returns true if the first argument is greater than or equal to the second argument.</td></tr>\r\n      <tr>\r\n        <td>( )</td>\r\n        <td>[if !(IE 7)]</td>\r\n        <td>Subexpression operators. Used in conjunction with boolean operators to create more complex expressions. </td>\r\n      </tr>\r\n      <tr>\r\n        <td>&amp;</td><td>[if (gt IE 5)&amp;(lt IE 7)]</td>\r\n        <td>The AND operator. Returns true if all subexpressions evaluate to true</td>\r\n      </tr>\r\n      <tr>\r\n        <td>|</td>\r\n        <td>[if (IE 6)|(IE 7)]</td>\r\n        <td>The OR operator. Returns true if any of the subexpressions evaluates to true.</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n* Isolate IE filters and hacks into new files, e.g., **ie8.css** for Internet Explorer 8. Not all internet explorer browsers have an issue so do not create an ie.css file. Specifying versions help. There'll come a day when there's no need to support these browsers and all you have to do is delete the file and references to it.\r\n\r\n* Avoid the use of hacks for Internet explorer. Find ways to fix the issue without using any hack, e.g., using child selectors or conditional comments.\r\n\r\n  The **star html hack** is often used for IE7 browser.\r\n   ```css\r\n    #something {\r\n      * margin-top: 10px;\r\n    }\r\n   ```\r\n\r\n  It is best to just use conditional comments.\r\n   ```css\r\n    // on ie7.css\r\n    #something {\r\n      margin-top: 10px !important;\r\n    }\r\n   ```\r\n\r\n  The important rule will override previously defined rule.\r\n\r\n  The underscore hack is used for IE6 browser.\r\n   ```css\r\n    // on style.css\r\n    #something {\r\n      _margin-top: 10px;\r\n    }\r\n   ```\r\n\r\n   This may work better because IE6 does not read child selector.\r\n   ```css\r\n    // on style.css\r\n    #something {\r\n      margin-top: 10px;\r\n    }\r\n\r\n    body >  #something {\r\n      margin-top: 0px;\r\n    }\r\n   ```\r\n   But this is the recommended fix:\r\n   ```css\r\n    // on ie6.css\r\n    #something {\r\n      margin-top: 10px !important;\r\n    }\r\n   ```\r\n\r\n## References\r\n\r\n<a href=\"https://github.com/styleguide\" target=\"_blank\">HTML5 for Web Designers by Jeremy Keith</a>\r\n\r\n<a href=\"https://github.com/styleguide\" target=\"_blank\">Github Style Guide</a>\r\n\r\n<a href=\"http://smacss.com\" target=\"_blank\">Scalable and Modular Architechture for CSS by Jonathan Snook</a>\r\n\r\n\r\n## Contributors\r\n\r\n\r\n#### <a href=\"http://blog.bridgeutopiaweb.com\" target=\"_blank\"> Katherine G. Pe </a>, Software Developer\r\n\r\nThis style guide was written specifically for projects I work on or help with. This is clearly written to document good style and promote it for a better web.\r\n\r\n\r\n&copy; 2012 Katherine G. Pe. Released under the <a href=\"http://opensource.org/licenses/mit-license.php\" target=\"_blank\"> MIT License</a>.\r\n"}